#+HTML_HEAD: <link rel="stylesheet" type="text/css" href="/chrome/rethink.css" />
#+HTML_HEAD_EXTRA: <img src="/chrome/image1.jpg" />
#+OPTIONS: toc:nil num:nil html-style:nil
# #+INFOJS_OPT: view:info toc:nil path:/chrome/org-info.js
#+AUTHOR: JÃ¶rg Kollmann
#+TITLE: Welcome
#+DATE: 2020-11-04

# TODO: insert publication dates

* Notes to my future self.
# This might grow into a blog.

Here I'm just collecting some notes about interesting things I learned
and I might want to remember. Restarting after a longer break..

# ** Handling Minor and Major Upgrades in NetBSD

** [[https:./unix-sam][Discovering the /sam/ editor]]                     :2024:04:12:

In Kernighan's book /UNIX: a history and a memoir/, he mentions the
editor /sam/, which seems to have been in use by many well known
members of the IT scene. So, when reading that book, I got curious and
did a few experiments with this editor.

# ** [[https:./articles-functional][WIP: Haskell-like semantics in Emacs LISP]]                     :2023:08:03:
#
# Reading the first chapter of `Algorithm design with Haskell` (and
# learning Haskell by the way), I really liked the idiomatic ways of
# concisely expressing functions by means of composition, partial
# application and lazy evaluation. So I was wondering how these ideas
# could be implemented with emacs lisp.

** [[https:./articles-emacs-lisp-2/][On Function/Value Namespaces in Emacs Lisp]]                    :2023:07:24:

Trying to understand the separate namespaces for functions
and values in Lisp_2, I was diving into that a little bit, taking some
notes and preparing a set of macros. Providing local namespaces for
the development of further macros, they can help to prevent unwanted
free name capture.

** [[https:./articles-emacs-display-1/][Configuring the Emacs display system]] :2021:02:09:

A topic of long and outstanding troubles for me has been the automatic
selection of the /other window/ in emacs. I tried to solve the
question on how to change this behaviour (at least for me).

** [[https:./articles_recursion_oberon/][Transforming recursive Algorithms into iterative loops (in Oberon)]] :2021:02:02:
 Some years ago, I was trying to wrap my head around how to transform
 recursions into iterative loops. The way to go would be transforming
 typical recursions (e.g. derived from mathematical definitions) into
 tail call recursions, which can then easily be expressed as loops.

** [[https:./articles-timecapsule-crossbuild/][Cross-building time capsule binaries to backup NetBSD]]           :2020:11:04:
 About cross-compiling binaries for time capsule devices. Used here to
 enable easy access to backups when restoring from an unmodified NetBSD
 installation medium.

** [[https:./articles-netbsd-backup/][Backup and restore in NetBSD]]                                  :2020:06:08:
Putting together the bits and pieces of a backup and restore concept,
while not being rocket science, always seems to be a little bit
ungrateful. Most Admin Handbooks handle this topic only within few
pages. After replacing my old Mac Mini's OS by NetBSD, I tried to
implement an automated backup, allowing me to handle it similarly to
the time machine backups I've been using before.

** [[https:./articles-netbsd-install/][Experiences Installing NetBSD on a PPC based Mac Mini]]         :2020:05:19:
Over the easter days I was planning to resurrect my trusty ppc based Mac Mini and
to replace the old OSX 10.4 with a newer, but still BSD-based operating system.
Unfortunately, as it seems, there are a few obstacles to
overcome when trying to install NetBSD/macppc on a Mac Mini. So
I thought I'd write a little bit about my experiences in case someone else
(probably me) ever tries to install this combination again.

** [[https://github.com/e17i/emacs-config/][My Emacs babel-init.org]]
Programming Lisp can be very recreational. And one of the best places
to do that these days is in Emacs. So here is my literate emacs init,
consisting of all kinds of collected lisp functions. Some of them
probably should be put into proper packages instead...

# * NetBSD
# * Emacs
# * TeX
# * Oberon
# * Programming in general

* COMMENT Local Variables
  # Local Variables:
  # org-html-htmlize-output-type: css
  # org-html-postamble-format:(("en" "<p class=\"author\">Author: %a (<a rel=\"me\" href=\"https://mastodon.social/@joergkb\">@joergkb@mastodon.social</a>)</p> <p>Made on emacs org-mode with <a href=\"https://jessekelly881-rethink.surge.sh/\">Rethink</a></p>"))
  # org-html-postamble: t
  # org-html-preamble: nil
  # End:
